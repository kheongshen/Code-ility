**1.  Binary Gap**

*   **Question:**  A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N. For example, the number 9 has binary representation 1001 and contains a binary gap of length 2. The number 529 has binary representation 1000010001 and contains two binary gaps: one of length 4 and one of length 3.  Write a function that, given a positive integer N, returns the length of its longest binary gap. The function should return 0 if N doesn't contain a binary gap.

```java
class Solution {
    public int solution(int N) {
        String binaryString = Integer.toBinaryString(N);
        int maxGap = 0;
        int currentGap = 0;
        boolean counting = false;

        for (char c : binaryString.toCharArray()) {
            if (c == '1') {
                if (counting) {
                    maxGap = Math.max(maxGap, currentGap);
                }
                counting = true;
                currentGap = 0;
            } else if (counting) {
                currentGap++;
            }
        }

        return maxGap;
    }
}
```

**2.  Cyclic Rotation**

*   **Question:** An array A consisting of N integers is given. Rotation of the array means that each element is shifted right by one index, and the last element of the array is moved to the first place. For example, the rotation of array A = [3, 8, 9, 7, 6] is [6, 3, 8, 9, 7] (elements are shifted right by one position and 6 is moved to the first place).  Write a function that, given an array A consisting of N integers and an integer K, returns the array A rotated K times.

```java
class Solution {
    public int[] solution(int[] A, int K) {
        int n = A.length;
        if (n == 0) {
            return A;
        }

        K = K % n; // Handle cases where K > n
        if (K == 0) {
            return A;
        }

        int[] rotated = new int[n];
        for (int i = 0; i < n; i++) {
            rotated[(i + K) % n] = A[i];
        }
        return rotated;
    }
}
```

**3.  Odd Occurrences In Array**

*   **Question:** A non-empty array A consisting of N integers is given. The array contains an odd number of elements, and each element of the array can be paired with another element that has the same value, except for one element which is left unpaired.  Write a function that, given an array A consisting of N integers fulfilling the above conditions, returns the value of the unpaired element.

```java
class Solution {
    public int solution(int[] A) {
        int result = 0;
        for (int num : A) {
            result ^= num; // XOR operation cancels out pairs
        }
        return result;
    }
}
```

**4.  FrogJmp**

*   **Question:**  A small frog wants to get to the other side of the road. The frog is currently located at position X and wants to get to a position greater than or equal to Y. The small frog always jumps a fixed distance D.  Write a function that, given three integers X, Y and D, returns the minimal number of jumps that the small frog must perform to reach its target.

```java
class Solution {
    public int solution(int X, int Y, int D) {
        int distance = Y - X;
        return (int) Math.ceil((double) distance / D);
    }
}
```

**5.  PermMissingElem**

*   **Question:** An array A consisting of N different integers is given. The array contains integers in the range [1..(N + 1)], which means that exactly one element is missing. Your goal is to find that missing element.  Write a function that, given an array A, returns the value of the missing element.

```java
class Solution {
    public int solution(int[] A) {
        int n = A.length;
        long expectedSum = (long) (n + 1) * (n + 2) / 2; // Use long to prevent overflow
        long actualSum = 0;
        for (int num : A) {
            actualSum += num;
        }
        return (int) (expectedSum - actualSum);
    }
}
```

**6.  TapeEquilibrium**

*   **Question:** A non-empty array A consisting of N integers is given. Array A represents numbers on a tape.  Any integer P, such that 0 < P < N, splits this tape into two non-empty parts: A[0], A[1], ..., A[P-1] and A[P], A[P+1], ..., A[N-1]. The difference between the two parts is the value of: |(A[0] + A[1] + ... + A[P-1]) - (A[P] + A[P+1] + ... + A[N-1])|  Write a function that, given a non-empty array A of N integers, returns the minimal difference that can be achieved.

```java
class Solution {
    public int solution(int[] A) {
        int n = A.length;
        long totalSum = 0;
        for (int num : A) {
            totalSum += num;
        }

        long leftSum = 0;
        long minDifference = Integer.MAX_VALUE;

        for (int p = 0; p < n - 1; p++) {
            leftSum += A[p];
            long rightSum = totalSum - leftSum;
            long difference = Math.abs(leftSum - rightSum);
            minDifference = Math.min(minDifference, difference);
        }

        return (int) minDifference;
    }
}
```

**7.  FrogRiverOne**

*   **Question:**  A small frog wants to get to the other side of a river. The frog is currently located at position 0, and wants to get to position X+1. Leaves fall on the surface of the river.  You are given an array A consisting of N integers representing the falling leaves. A[K] represents the position where one leaf falls at time K.  Write a function that, given an integer X and an array A consisting of N integers, returns the earliest time when the frog can jump to the other side of the river. The frog can jump to the other side only when leaves appear at every position across the river from 1 to X.

```java
class Solution {
    public int solution(int X, int[] A) {
        boolean[] positions = new boolean[X + 1];
        int count = 0;

        for (int i = 0; i < A.length; i++) {
            int position = A[i];
            if (position <= X && !positions[position]) {
                positions[position] = true;
                count++;
                if (count == X) {
                    return i;
                }
            }
        }

        return -1;
    }
}
```

**8.  PermCheck**

*   **Question:** A non-empty array A consisting of N integers is given. A permutation is a sequence containing each element from 1 to N once, and only once.  Write a function that, given an array A, returns 1 if array A is a permutation and 0 if it is not.

```java
class Solution {
    public int solution(int[] A) {
        int n = A.length;
        boolean[] seen = new boolean[n + 1]; // Index 0 is unused
        for (int num : A) {
            if (num < 1 || num > n || seen[num]) {
                return 0; // Out of range or duplicate
            }
            seen[num] = true;
        }

        for (int i = 1; i <= n; i++) {
            if (!seen[i]) {
                return 0; // Missing element
            }
        }

        return 1;
    }
}
```

**9.  MaxCounters**

*   **Question:** You are given N counters, initially set to 0, and you have two possible operations on them:

    *   `increase(X)` − counter X is increased by 1,
    *   `max counter` − all counters are set to the maximum value of any counter.

A non-empty array A of M integers is given. This array represents consecutive operations:

    *   if A[K] = X + 1, such that 1 ≤ X ≤ N, then operation K is `increase(X)`,
    *   if A[K] = N + 1 then operation K is `max counter`.

Write a function that, given an integer N and an array A consisting of M integers, returns a sequence of integers representing the values of the counters.

```java
class Solution {
    public int[] solution(int N, int[] A) {
        int[] counters = new int[N];
        int maxCounter = 0;
        int lastUpdate = 0;

        for (int operation : A) {
            if (operation >= 1 && operation <= N) {
                int index = operation - 1;
                counters[index] = Math.max(counters[index], lastUpdate); // Apply last max counter
                counters[index]++;
                maxCounter = Math.max(maxCounter, counters[index]);
            } else if (operation == N + 1) {
                lastUpdate = maxCounter;
            }
        }

        // Apply last max counter to counters that haven't been updated since
        for (int i = 0; i < N; i++) {
            counters[i] = Math.max(counters[i], lastUpdate);
        }

        return counters;
    }
}
```

**10. MissingInteger**

*   **Question:** Write a function:

    ```java
    class Solution { public int solution(int[] A); }
    ```

    that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A.

    For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5.  Given A = [1, 2, 3], the function should return 4.  Given A = [−1, −3], the function should return 1.

```java
class Solution {
    public int solution(int[] A) {
        int n = A.length;
        boolean[] seen = new boolean[n + 1];

        for (int num : A) {
            if (num > 0 && num <= n) {
                seen[num] = true;
            }
        }

        for (int i = 1; i <= n; i++) {
            if (!seen[i]) {
                return i;
            }
        }

        return n + 1;
    }
}
```

**11. CountDiv**

*   **Question:** Write a function:

    ```java
    class Solution { public int solution(int A, int B, int K); }
    ```

    that, given three integers A, B and K, returns the number of integers within the range [A..B] that are divisible by K, i.e.:

    `{ i : A ≤ i ≤ B, i mod K = 0 }`

    For example, given A = 6, B = 11 and K = 2, your function should return 3, because there are three numbers divisible by 2 within the range [6..11], namely 6, 8 and 10.

```java
class Solution {
    public int solution(int A, int B, int K) {
        int firstDivisible = (A % K == 0) ? A : A + (K - A % K);

        if (firstDivisible > B) {
            return 0;
        }

        return (B - firstDivisible) / K + 1;
    }
}
```

**12. PassingCars**

*   **Question:** A non-empty array A consisting of N integers is given. The consecutive elements of array A represent consecutive cars on a road.

Array A contains only 0s and 1s:

*   0 represents a car traveling east,
*   1 represents a car traveling west.

The goal is to count passing cars. We say that a pair of cars (P, Q), where 0 ≤ P < Q < N, is passing when P is traveling to the east and Q is traveling to the west.

Write a function that, given an array A, returns the number of passing cars.

```java
class Solution {
    public int solution(int[] A) {
        int passingCars = 0;
        int eastCars = 0;

        for (int car : A) {
            if (car == 0) {
                eastCars++;
            } else {
                passingCars += eastCars;
                if (passingCars > 1000000000) {
                    return -1;
                }
            }
        }

        return passingCars;
    }
}
```

**13. MinAvgTwoSlice**

*   **Question:** A non-empty array A consisting of N integers is given. A slice of array A is any pair of integers (P, Q) such that 0 ≤ P < Q < N.

The average of a slice (P, Q) is the sum of A[P] + A[P+1] + ... + A[Q] divided by the length of the slice (Q − P + 1).

Write a function that, given an array A, returns the starting position P of the slice with the minimal average.

```java
class Solution {
    public int solution(int[] A) {
        int minIndex = 0;
        double minAvg = Integer.MAX_VALUE;
        double currentAvg;

        for (int i = 0; i < A.length - 1; i++) {
            currentAvg = (double) (A[i] + A[i + 1]) / 2;
            if (currentAvg < minAvg) {
                minAvg = currentAvg;
                minIndex = i;
            }
            if (i < A.length - 2) {
                currentAvg = (double) (A[i] + A[i + 1] + A[i + 2]) / 3;
                if (currentAvg < minAvg) {
                    minAvg = currentAvg;
                    minIndex = i;
                }
            }
        }

        return minIndex;
    }
}
```

**14. GenomicRangeQuery**

*   **Question:** A DNA sequence can be represented as a string consisting of the letters A, C, G and T, which correspond to the types of nucleotides found in DNA. Each nucleotide has an impact factor, which is an integer. Nucleotides of types A, C, G and T have impact factors of 1, 2, 3 and 4, respectively. You are given a non-empty string S consisting of N characters representing a DNA sequence. You are also given two non-empty arrays P and Q consisting of M integers. These arrays represent M queries, each of which is a range within S. For the K-th query, for example, P[K] and Q[K] are the positions of the K-th query range.

Write a function that, given a string S, and two non-empty arrays P and Q consisting of M integers, returns an array consisting of M integers specifying the consecutive answers to all queries.

```java
class Solution {
    public int[] solution(String S, int[] P, int[] Q) {
        int n = S.length();
        int m = P.length;
        int[] result = new int[m];

        for (int i = 0; i < m; i++) {
            int start = P[i];
            int end = Q[i];
            int minImpact = 5; // Initialize with a value greater than possible impact factors

            for (int j = start; j <= end; j++) {
                char nucleotide = S.charAt(j);
                int impact;
                switch (nucleotide) {
                    case 'A': impact = 1; break;
                    case 'C': impact = 2; break;
                    case 'G': impact = 3; break;
                    case 'T': impact = 4; break;
                    default: impact = 5; // Should never happen
                }
                minImpact = Math.min(minImpact, impact);
            }
            result[i] = minImpact;
        }
        return result;
    }
}
```

**15. Distinct**

*   **Question:** Write a function

    ```java
    class Solution { public int solution(int[] A); }
    ```

    that, given an array A consisting of N integers, returns the number of distinct values in array A.

```java
import java.util.HashSet;
import java.util.Set;

class Solution {
    public int solution(int[] A) {
        Set<Integer> distinctValues = new HashSet<>();
        for (int num : A) {
            distinctValues.add(num);
        }
        return distinctValues.size();
    }
}
```

**16. Triangle**

*   **Question:**  An array A consisting of N integers is given. A triplet (P, Q, R) is triangular if 0 ≤ P < Q < R < N and:

    *   A[P] + A[Q] > A[R],
    *   A[Q] + A[R] > A[P],
    *   A[R] + A[P] > A[Q].

For example, consider array A such that:

  A[0] = 10    A[1] = 2    A[2] = 5    A[3] = 1    A[4] = 8    A[5] = 20

Triplet (0, 2, 4) is triangular.  Write a function that, given an array A consisting of N integers, returns 1 if there exists a triangular triplet for this array and returns 0 otherwise.

```java
import java.util.Arrays;

class Solution {
    public int solution(int[] A) {
        Arrays.sort(A); // Sort the array to make the check easier

        for (int i = 0; i < A.length - 2; i++) {
            // Use long to avoid overflow
            if ((long) A[i] + A[i + 1] > A[i + 2]) {
                return 1;
            }
        }

        return 0;
    }
}
```

**17. MaxProductOfThree**

*   **Question:** A non-empty array A consisting of N integers is given. The product of triplet (P, Q, R) equates to A[P] * A[Q] * A[R] (0 ≤ P < Q < R < N).

Write a function that, given a non-empty array A, returns the value of the maximal product of any triplet.

```java
import java.util.Arrays;

class Solution {
    public int solution(int[] A) {
        Arrays.sort(A);
        int n = A.length;

        // Either three largest positive numbers, or two smallest negative numbers and the largest positive number
        return Math.max(A[n - 1] * A[n - 2] * A[n - 3], A[0] * A[1] * A[n - 1]);
    }
}
```

**18. NumberOfDiscIntersections**

*   **Question:** We draw N discs on a plane. The discs are numbered from 0 to N − 1. An array A of N non-negative integers, specifying the radiuses of the discs, is given. The J-th disc is drawn with its center at (J, 0) and radius A[J].  We say that the K-th disc and L-th disc intersect if K ≠ L and the J-th disc and L-th disc have at least one common point.  Write a function that, given an array A describing N discs as explained above, returns the number of (unordered) pairs of intersecting discs. The function should return −1 if the number of intersecting pairs exceeds 10,000,000.

```java
import java.util.Arrays;

class Solution {
    public int solution(int[] A) {
        int n = A.length;
        long[] starts = new long[n];
        long[] ends = new long[n];

        for (int i = 0; i < n; i++) {
            starts[i] = (long) i - A[i];
            ends[i] = (long) i + A[i];
        }

        Arrays.sort(starts);
        Arrays.sort(ends);

        int intersections = 0;
        int activeDiscs = 0;
        int startIdx = 0;
        int endIdx = 0;

        while (startIdx < n) {
            if (starts[startIdx] <= ends[endIdx]) {
                intersections += activeDiscs;
                if (intersections > 10000000) {
                    return -1;
                }
                activeDiscs++;
                startIdx++;
            } else {
                activeDiscs--;
                endIdx++;
            }
        }
        return intersections;
    }
}
```

**19. Brackets**

*   **Question:** A string S consisting of N characters is considered to be properly nested if any of the following conditions is true:

    *   S is empty;
    *   S has the form "(U)" or "[U]" or "{U}" where U is a properly nested string;
    *   S has the form "VW" where V and W are properly nested strings.

Write a function that, given a string S consisting of N characters, returns 1 if S is properly nested and 0 otherwise.

```java
import java.util.Stack;

class Solution {
    public int solution(String S) {
        Stack<Character> stack = new Stack<>();

        for (char c : S.toCharArray()) {
            if (c == '(' || c == '[' || c == '{') {
                stack.push(c);
            } else if (c == ')') {
                if (stack.isEmpty() || stack.pop() != '(') return 0;
            } else if (c == ']') {
                if (stack.isEmpty() || stack.pop() != '[') return 0;
            } else if (c == '}') {
                if (stack.isEmpty() || stack.pop() != '{') return 0;
            }
        }

        return stack.isEmpty() ? 1 : 0;
    }
}
```

**20. Fish**

*   **Question:** You are given two non-empty arrays A and B consisting of N integers. Arrays A and B represent N fishes that are swimming along a river.

Array A contains the sizes of the fishes. All its elements are unique.
Array B contains the directions of the fishes. It contains only 0s and 1s, where:
0 represents a fish flowing upstream,
1 represents a fish flowing downstream.

Write a function that, given two non-empty arrays A and B consisting of N integers, returns the number of fish that will stay alive.

```java
import java.util.Stack;

class Solution {
    public int solution(int[] A, int[] B) {
        Stack<Integer> downstreamFish = new Stack<>();
        int aliveFish = 0;

        for (int i = 0; i < A.length; i++) {
            if (B[i] == 1) {
                downstreamFish.push(A[i]);
            } else {
                // Upstream fish meets downstream fish
                while (!downstreamFish.isEmpty()) {
                    if (downstreamFish.peek() > A[i]) {
                        // Downstream fish eats upstream fish
                        break;
                    } else {
                        // Upstream fish eats downstream fish
                        downstreamFish.pop();
                    }
                }

                if (downstreamFish.isEmpty()) {
                    aliveFish++;
                }
            }
        }

        aliveFish += downstreamFish.size();
        return aliveFish;
    }
}
```

**21. StoneWall**

*   **Question:** You are going to build a stone wall. The wall should be straight and of constant height, but it should be of different widths. The wall is to be built of cuboid stone blocks (that is, all sides of the blocks are rectangular).

Write a function that, given an array H of N positive integers specifying the height of the wall for each consecutive section, returns the minimum number of blocks needed to build the wall.

```java
import java.util.Stack;

class Solution {
    public int solution(int[] H) {
        Stack<Integer> stack = new Stack<>();
        int blocks = 0;

        for (int height : H) {
            // Remove blocks that are taller than the current height
            while (!stack.isEmpty() && stack.peek() > height) {
                stack.pop();
            }

            // If the stack is empty, or the top block is shorter than the current height, we need a new block
            if (stack.isEmpty() || stack.peek() < height) {
                stack.push(height);
                blocks++;
            }
        }

        return blocks;
    }
}
```

**22. Dominator**

*   **Question:** An array A consisting of N integers is given. The dominator of array A is the value that occurs in more than half of the elements of A.

Write a function that, given an array A consisting of N integers, returns index of any element of array A in which the dominator of A occurs. The function should return −1 if array A does not have a dominator.

```java
import java.util.HashMap;
import java.util.Map;

class Solution {
    public int solution(int[] A) {
        int n = A.length;
        if (n == 0) {
            return -1;
        }

        Map<Integer, Integer> countMap = new HashMap<>();
        int dominator = -1;
        int dominatorCount = 0;

        for (int i = 0; i < n; i++) {
            int num = A[i];
            int count = countMap.getOrDefault(num, 0) + 1;
            countMap.put(num, count);

            if (count > dominatorCount) {
                dominatorCount = count;
                dominator = num;
            }
        }

        if (dominatorCount > n / 2) {
            for (int i = 0; i < n; i++) {
                if (A[i] == dominator) {
                    return i; // Return any index of the dominator
                }
            }
        }

        return -1;
    }
}
```

**23. EquiLeader**

*   **Question:** A non-empty array A consisting of N integers is given.

The leader of this array is the value that occurs in more than half of the elements of A.

An equi leader is an index S such that 0 ≤ S < N − 1 and two sequences A[0], A[1], ..., A[S] and A[S + 1], A[S + 2], ..., A[N − 1] have leaders of the same value.

Write a function that, given a non-empty array A consisting of N integers, returns the number of equi leaders.

```java
class Solution {
    public int solution(int[] A) {
        int n = A.length;
        if (n < 2) {
            return 0;
        }

        // Find the leader (if it exists)
        int leaderValue = findLeader(A);
        if (leaderValue == -1) {
            return 0; // No leader in the original array
        }

        // Count occurrences of the leader in the original array
        int totalLeaderCount = 0;
        for (int num : A) {
            if (num == leaderValue) {
                totalLeaderCount++;
            }
        }

        int equiLeaders = 0;
        int leftLeaderCount = 0;

        for (int i = 0; i < n - 1; i++) {
            if (A[i] == leaderValue) {
                leftLeaderCount++;
            }

            // Check if leader condition is satisfied in both sub-arrays
            if (leftLeaderCount > (i + 1) / 2 &&
                (totalLeaderCount - leftLeaderCount) > (n - i - 1) / 2) {
                equiLeaders++;
            }
        }

        return equiLeaders;
    }

    private int findLeader(int[] A) {
        int n = A.length;
        int candidate = -1;
        int count = 0;

        // Find a candidate for leader using the "pair elimination" algorithm
        for (int num : A) {
            if (count == 0) {
                candidate = num;
                count = 1;
            } else if (num == candidate) {
                count++;
            } else {
                count--;
            }
        }

        // Verify if the candidate is actually a leader
        int leaderCount = 0;
        for (int num : A) {
            if (num == candidate) {
                leaderCount++;
            }
        }

        if (leaderCount > n / 2) {
            return candidate;
        } else {
            return -1;
        }
    }
}
```

**24. MaxSliceSum**

*   **Question:** Given an array A of N integers, find the maximum sum of any slice of A.  A slice of array A is a pair of integers (P, Q) such that 0 ≤ P ≤ Q < N. The sum of a slice (P, Q) is the sum of the elements A[P], A[P+1], ..., A[Q].  Write a function that, given an array A consisting of N integers, returns the maximum sum of any slice of A.

```java
class Solution {
    public int solution(int[] A) {
        int maxSoFar = A[0];
        int maxEndingHere = A[0];

        for (int i = 1; i < A.length; i++) {
            maxEndingHere = Math.max(A[i], maxEndingHere + A[i]);
            maxSoFar = Math.max(maxSoFar, maxEndingHere);
        }

        return maxSoFar;
    }
}
```

**25. MaxProfit**

*   **Question:** An array A consisting of N integers is given. It contains daily prices of a stock share for a period of N consecutive days. If you were only allowed to buy one share of the stock once and sell it only once, on which day would you want to buy and on which day would you want to sell to maximize your profit?

Write a function that, given an array A consisting of N integers, returns the maximum possible profit from one transaction during this period. The function should return 0 if it was impossible to gain any profit.

```java
class Solution {
    public int solution(int[] A) {
        if (A.length < 2) {
            return 0; // Need at least two days to buy and sell
        }

        int maxProfit = 0;
        int minPrice = A[0];

        for (int i = 1; i < A.length; i++) {
            maxProfit = Math.max(maxProfit, A[i] - minPrice);
            minPrice = Math.min(minPrice, A[i]);
        }

        return maxProfit;
    }
}
```

**26. CountFactors**

*   **Question:** A positive integer D is a factor of a positive integer N if there exists an integer M such that N = D * M.

For example, 6 is a factor of 24, because M = 4 satisfies the condition above (24 = 6 * 4).  Write a function that, given a positive integer N, returns the number of its factors.

```java
class Solution {
    public int solution(int N) {
        int count = 0;
        int i = 1;

        while (i * i < N) {
            if (N % i == 0) {
                count += 2;
            }
            i++;
        }

        if (i * i == N) {
            count++;
        }

        return count;
    }
}
```

**27. MinPerimeterRectangle**

*   **Question:** An integer N is given, representing the area of some rectangle.

The goal is to find the minimal perimeter of any rectangle whose area is exactly equal to N. The sides of this rectangle should be only integers.  Write a function that, given an integer N, returns the minimal perimeter of any rectangle whose area is exactly equal to N.

```java
class Solution {
    public int solution(int N) {
        int minPerimeter = Integer.MAX_VALUE;
        int i = 1;

        while (i * i <= N) {
            if (N % i == 0) {
                int a = i;
                int b = N / i;
                int perimeter = 2 * (a + b);
                minPerimeter = Math.min(minPerimeter, perimeter);
            }
            i++;
        }

        return minPerimeter;
    }
}
```



#Gemini : Okay, here are 30 commonly seen Codility-style questions that would be suitable for a "Yellow Belt" assessment. These questions focus on basic algorithms, data structures, and efficiency. They typically require understanding of concepts like arrays, loops, conditional statements, and basic time complexity.

**Arrays and Loops:**

1.  **Odd Occurrences In Array:** Find the value that occurs in an array an odd number of times.  (Difficulty: Easy)
2.  **Cyclic Rotation:** Rotate an array to the right by a given number of steps. (Difficulty: Easy)
3.  **Frog Jump:** Calculate the minimal number of jumps a frog needs to take to reach its target. (Difficulty: Easy)
4.  **Perm Missing Elem:** Find the missing element in a given permutation. (Difficulty: Easy-Medium)
5.  **Tape Equilibrium:** Minimize the value `abs((A[0] + ... + A[P-1]) - (A[P] + ... + A[N-1]))` for all `P`. (Difficulty: Easy-Medium)
6.  **FrogRiverOne:** Find the earliest time when a frog can jump to the other side of a river. (Difficulty: Easy-Medium)
7.  **Max Counters:** Calculate the values of counters after applying all alternating operations: increase counter by 1; set value of all counters to current maximum. (Difficulty: Medium)
8.  **Missing Integer:** Find the smallest positive integer that does not occur in a given sequence. (Difficulty: Medium)
9.  **Perm Check:** Check whether array A is a permutation. (Difficulty: Easy-Medium)
10. **Count Div:** Given three integers A, B and K, return the number of integers within the range [A..B] that are divisible by K. (Difficulty: Easy)
11. **Passing Cars:** Count the number of passing cars on the road. (Difficulty: Medium)
12. **Distinct:** Compute number of distinct values in an array. (Difficulty: Easy)

**Time Complexity and Algorithm Design:**

13. **Binary Gap:** Find the length of the longest sequence of zeros in a binary representation of an integer. (Difficulty: Easy)
14. **Smallest Positive Integer:** Find the smallest positive integer that does not occur in a given sequence.  (Focus on efficiency) (Difficulty: Medium)
15. **EquiLeader:** Find the index such that the number of occurrences of the leader element in a sequence on both sides of that index is the same. (Difficulty: Harder Medium)
16. **Dominator:** Find the index of an element of an array such that its value occurs more than half of the elements in the array. (Difficulty: Medium)

**Strings:**

17. **String Reversal:** Reverse a string. (Difficulty: Easy)
18. **Palindrome Check:** Determine if a string is a palindrome. (Difficulty: Easy)
19. **Longest Prefix Suffix:** Find the length of the longest proper prefix which is also a proper suffix. (Difficulty: Medium)
20. **String Matching:** Implement a basic string matching algorithm (e.g., brute force). (Difficulty: Easy-Medium)

**Stacks and Queues (Relatively Basic Use):**

21. **Brackets:** Determine whether a given string of parentheses (round, square, curly) is properly nested. (Difficulty: Medium)
22. **StoneWall:** Cover "skyline" composed of rectangular blocks. (Difficulty: Medium)

**Basic Data Structures (Lists, Sets, Maps):**

23. **Remove Duplicates:** Remove duplicate elements from a list (consider different approaches and efficiency). (Difficulty: Easy-Medium)
24. **Two Sum:** Given an array of integers, find two numbers such that they add up to a specific target. (Difficulty: Medium)
25. **Intersection of Arrays:** Find the intersection of two arrays (i.e., elements that appear in both). (Difficulty: Easy-Medium)

**Bit Manipulation (Very Basic):**

26. **Number of Set Bits:** Count the number of set bits (1s) in an integer. (Difficulty: Easy)

**Divisibility and Prime Numbers (Fundamentals):**

27. **Check if Prime:** Determine if a number is prime. (Difficulty: Easy)
28. **Factors:** Find all factors of a given number. (Difficulty: Easy)

**Sorting (Simple):**

29. **Bubble Sort:** Implement bubble sort. (Difficulty: Easy)
30. **Selection Sort:** Implement selection sort. (Difficulty: Easy)

**Important Considerations for the Assessment:**

*   **Focus on Correctness:** The code should produce the correct output for all valid inputs.
*   **Efficiency:** Consider the time and space complexity of your solution. Aim for solutions that are reasonably efficient, especially for larger datasets.
*   **Code Clarity:** Write clean, readable code with meaningful variable names and comments where necessary.
*   **Edge Cases:** Think about edge cases and boundary conditions (e.g., empty arrays, very large numbers, negative numbers) and ensure your code handles them correctly.
*   **Test Cases:**  It's crucial to test your code thoroughly with a variety of inputs, including edge cases.